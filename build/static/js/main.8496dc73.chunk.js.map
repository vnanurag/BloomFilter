{"version":3,"sources":["BloomFilter.js","data.js","App.js","serviceWorker.js","index.js"],"names":["BloomFilter","length","_this","this","Object","classCallCheck","add","str","memory","hashFn1","hashFn2","hashFn3","hashFn4","contains","index","i","charCodeAt","Math","floor","Array","fill","Names","words","App","props","possibleConstructorReturn","getPrototypeOf","call","implementBloomFilter","state","bf","memorySize","forEach","word","setState","addValue","wordsArray","push","addMessage","textInput","focus","search","searchValue","exists","searchMessage","updateAddText","noteText","target","value","updateSearchText","handleKeyPressValue","event","key","_this2","react_default","a","createElement","className","onClick","bind","type","ref","input","placeholder","onChange","onKeyPress","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8496dc73.chunk.js","sourcesContent":["class BloomFilter{\r\n    constructor(length){\r\n        this.length = length;\r\n        this.memory = new Array(length).fill(0); // filling the array with all 0s\r\n    }\r\n\r\n    // string passes through 3 hash functions and the indices returned\r\n    // from the hash functions are set to 1 in the memory array\r\n    add = (str) => {        \r\n        this.memory[this.hashFn1(str, this.length)] = 1;\r\n        this.memory[this.hashFn2(str, this.length)] = 1;\r\n        this.memory[this.hashFn3(str, this.length)] = 1;\r\n        this.memory[this.hashFn4(str, this.length)] = 1;\r\n    }\r\n\r\n    // returns true if all the values are 1 in the array for that string\r\n    contains = (str) =>{\r\n        return this.memory[this.hashFn1(str, this.length)] \r\n                && this.memory[this.hashFn2(str, this.length)]\r\n                && this.memory[this.hashFn3(str, this.length)]\r\n                && this.memory[this.hashFn4(str, this.length)];\r\n    }\r\n\r\n    hashFn1 = (str, length) => {\r\n        let index = 0;\r\n        for(let i=0; i < str.length; i++){\r\n            index += (str.charCodeAt(i)*i)+1;\r\n        }\r\n        return Math.floor(index % length);\r\n    }\r\n\r\n    hashFn2 = (str, length) => {\r\n        let index = 0;\r\n        for(let i=0; i < str.length; i++){\r\n            index += ((str.charCodeAt(i)-i)*i) + 1;\r\n        }\r\n        return Math.floor((index*2) % length);\r\n    }\r\n\r\n    hashFn3 = (str, length) => {\r\n        let index = 0;\r\n        for(let i=0; i < str.length; i++){\r\n            index += ((str.charCodeAt(i)+1)*i)+1;\r\n        }\r\n        return Math.floor((index*3) % length);\r\n    }\r\n\r\n    hashFn4 = (str, length) => {\r\n        let index = 0;\r\n        for(let i=0; i < str.length; i++){\r\n            index += ((str.charCodeAt(i)+2)*i)+1;\r\n        }\r\n        return Math.floor((index*4) % length);\r\n    }\r\n}\r\n\r\nexport default BloomFilter;","class Names{\r\n    words = () => {\r\n        return ['Anu', 'Anurag', 'Alan', 'Alankrutha', 'Chinch', 'Chava', 'Thejasri', 'Kkr', 'Dj', 'Tangi', 'Paddu'];\r\n    }\r\n}\r\n\r\nexport default Names;","import React, { Component } from 'react';\nimport './App.css';\nimport BloomFilter from './BloomFilter'\nimport Names from './data'\n\nclass App extends Component{\n    constructor(props){\n      super(props);\n      this.state={\n        addValue:'',\n        searchValue:'',\n        memorySize: 50,\n        memory: [],\n        words:[],\n        addMessage: '',\n        searchMessage:''\n      }\n    }\n\n  render(){\n\n    return(\n      <div className=\"container\">\n\n        <div className=\"header\">Bloom Filter</div>\n\n        <div className=\"btn\" onClick={this.implementBloomFilter.bind(this)}>Initialize</div>\n        <div className=\"note\">\n          Bloom Filter Memory : [{this.state.memory}]\n        </div>\n\n        <input type=\"text\" \n                  ref={((input) =>{this.textInput = input} )}\n                  className = \"textInput\"\n                  placeholder = \"Add items...\"\n                  value = {this.state.addValue}\n                  onChange = {(addValue)=>{this.updateAddText(addValue)}}\n                  onKeyPress={this.handleKeyPressValue.bind(this)} />\n\n        <div className=\"btn\" onClick={this.add.bind(this)}>Add</div>\n        <div className=\"note\">\n          {this.state.addMessage}\n        </div>\n\n        <input type=\"text\" \n                  ref={((input) =>{this.textInput = input} )}\n                  className = \"textInput\"\n                  placeholder = \"Search items...\"\n                  value = {this.state.searchValue}\n                  onChange = {(searchValue)=>{this.updateSearchText(searchValue)}}\n                  onKeyPress={this.handleKeyPressValue.bind(this)} />\n\n        <div className=\"btn\" onClick={this.search.bind(this)}>Search</div>\n        <div className=\"note\">\n          {this.state.searchMessage}\n        </div>\n      </div>\n      \n    );\n  }\n\n  // Initializing the memory array with the initial data\n  implementBloomFilter = () =>{\n    let words = [];\n    if(this.state.words.length > 0){\n      words = this.state.words;\n    }\n    else{\n      const names = new Names();\n      words = names.words();\n    }\n\n    // Initializing a new instance of bloom filter with array size\n    const bf = new BloomFilter(this.state.memorySize);\n\n    words.forEach((word) => {\n      bf.add(word);\n    })\n\n    this.setState({\n      memory: bf.memory,\n      words: words\n    })\n  }\n\n  // Adding strings to the data and updating the memory array\n  add = () => {\n    if(this.state.addValue === '') {\n      return\n    }\n    \n    let wordsArray = [];\n    if(this.state.words.length > 0){\n      wordsArray = this.state.words;\n    }\n    else{\n      const names = new Names();\n      wordsArray = names.words();\n    }\n\n    wordsArray.push(this.state.addValue);\n\n    this.setState({\n      addValue: '',\n      words: wordsArray,\n      addMessage: \"Item added to the memory\"\n    });\n\n    this.textInput.focus();\n    this.implementBloomFilter();\n  }\n\n  // Checks if the string exists in the memory array\n  search = () => {\n    if(this.state.searchValue === ''){\n      return;\n    }\n    \n    let bf = new BloomFilter(this.state.memorySize);\n\n    if(this.state.memory.length > 0){\n      bf.memory = this.state.memory;\n    }\n\n    const exists = bf.contains(this.state.searchValue);\n    \n    this.setState({\n      searchValue:''\n    });\n\n    this.setState({\n      searchMessage: exists ? \"Item may exist in the memory\" : \"Item does not exist in the memory\"\n    })\n  }\n\n  updateAddText = (noteText) =>{\n    this.setState({\n      addValue: noteText.target.value\n    })\n  }\n\n  updateSearchText =(noteText) =>{\n    this.setState({\n      searchValue: noteText.target.value\n    })\n  }\n\n  handleKeyPressValue = (event) => {\n    if(event.key === 'Enter'){\n      if(this.state.addValue !== ''){\n        this.add();\n      }\n      else if(this.state.searchValue !== ''){\n        this.search();\n      }\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}